{
  "address": "0xD9E93F42b20C905D9C9b52d6881283dFc21464a7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "asset",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "author",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "limit",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct StatefulURI.Asset",
          "name": "asset",
          "type": "tuple"
        }
      ],
      "name": "AssetAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "discount",
          "type": "uint256"
        }
      ],
      "name": "AssetDiscounted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        }
      ],
      "name": "FactorySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "state",
          "type": "uint8"
        }
      ],
      "name": "StateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "assets",
      "outputs": [
        {
          "internalType": "string",
          "name": "asset",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "authorAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        }
      ],
      "name": "buyItem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "buyItemTo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        }
      ],
      "name": "buyItemWithPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "buyItemWithPointsTo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "claimDeposits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "depositAndWrap",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "erc1155Token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "erc1155TokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "erc1155TokenAmount",
          "type": "uint256"
        }
      ],
      "name": "depositERC1155",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "erc1155Token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "erc1155TokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "erc1155TokenAmount",
          "type": "uint256"
        }
      ],
      "name": "depositERC1155AndWrap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositERC20AndWrap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "erc721Token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "erc721TokenId",
          "type": "uint256"
        }
      ],
      "name": "depositERC721",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "erc721Token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "erc721TokenId",
          "type": "uint256"
        }
      ],
      "name": "depositERC721AndWrap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        }
      ],
      "name": "discount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "discounted",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "discountPercent",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "discounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "escapeERC1155",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "escapeERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "escapeERC721",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract IUTBFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        }
      ],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        }
      ],
      "name": "feeOrigin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        }
      ],
      "name": "feePoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        }
      ],
      "name": "feePointOrigin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getAsset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "asset",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockedETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockedPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mintWithDiscounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mintWithPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "open",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "point",
      "outputs": [
        {
          "internalType": "contract IERC20Token",
          "name": "token",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pointPercent",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "asset",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "registerAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "discount_",
          "type": "uint256"
        }
      ],
      "name": "registerDiscount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renewPercent",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renewable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        }
      ],
      "name": "reward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPercent",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "author",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        }
      ],
      "name": "setFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "states",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenState",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "viewERC1155Ids",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Vault.TkERC1155[]",
          "name": "amount",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "viewERC1155s",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "viewERC20Amount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "viewERC20s",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "viewERC721Ids",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amount",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "viewERC721s",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "viewETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawPoints",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "wrap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x794b51023715ec1e86dd26d10f8932ac114a550491b2632e2d69eefcb21ac55e",
  "receipt": {
    "to": null,
    "from": "0x23ABfdBd2535aC77ea60a078707a9e5820b0Fff2",
    "contractAddress": "0xD9E93F42b20C905D9C9b52d6881283dFc21464a7",
    "transactionIndex": 8,
    "gasUsed": "5501085",
    "logsBloom": "0x
    "blockHash": "0xe4bb5031976940fb76fc95960cf575392da62dcec2a2500bc44ebd2fedf77193",
    "transactionHash": "0x794b51023715ec1e86dd26d10f8932ac114a550491b2632e2d69eefcb21ac55e",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 8884902,
        "transactionHash": "0x794b51023715ec1e86dd26d10f8932ac114a550491b2632e2d69eefcb21ac55e",
        "address": "0xD9E93F42b20C905D9C9b52d6881283dFc21464a7",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000023abfdbd2535ac77ea60a078707a9e5820b0fff2"
        ],
        "data": "0x",
        "logIndex": 18,
        "blockHash": "0xe4bb5031976940fb76fc95960cf575392da62dcec2a2500bc44ebd2fedf77193"
      }
    ],
    "blockNumber": 8884902,
    "cumulativeGasUsed": "11857961",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "https://ipfs.io/ipfs/QmcLFF8symBHiiNp9ZAC278axp1XFFrj1x7oMv769RU68v/"
  ],
  "solcInputHash": "502e51b79a3b2eac6a2ce83a540fac3f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"asset\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct StatefulURI.Asset\",\"name\":\"asset\",\"type\":\"tuple\"}],\"name\":\"AssetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"discount\",\"type\":\"uint256\"}],\"name\":\"AssetDiscounted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"FactorySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"StateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"assets\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"asset\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"authorAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"buyItem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"buyItemTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"buyItemWithPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"buyItemWithPointsTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"claimDeposits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"depositAndWrap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"erc1155Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"erc1155TokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"erc1155TokenAmount\",\"type\":\"uint256\"}],\"name\":\"depositERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"erc1155Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"erc1155TokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"erc1155TokenAmount\",\"type\":\"uint256\"}],\"name\":\"depositERC1155AndWrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositERC20AndWrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"erc721Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"erc721TokenId\",\"type\":\"uint256\"}],\"name\":\"depositERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"erc721Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"erc721TokenId\",\"type\":\"uint256\"}],\"name\":\"depositERC721AndWrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"discount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"discounted\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discountPercent\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"discounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"escapeERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"escapeERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"escapeERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IUTBFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"feeOrigin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"feePoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"feePointOrigin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"asset\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mintWithDiscounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mintWithPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"open\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"point\",\"outputs\":[{\"internalType\":\"contract IERC20Token\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pointPercent\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"asset\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"registerAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discount_\",\"type\":\"uint256\"}],\"name\":\"registerDiscount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renewPercent\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renewable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPercent\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"setFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"states\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenState\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"viewERC1155Ids\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Vault.TkERC1155[]\",\"name\":\"amount\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"viewERC1155s\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"viewERC20Amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"viewERC20s\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"viewERC721Ids\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"viewERC721s\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"viewETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"wrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/products/UTBGiftBox.sol\":\"UTBGiftBox\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x249bc2a6d919da5f5145950664134cfcf2f66874bda801fd3b8fb861783da079\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping (uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping (address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC721).interfaceId\\n            || interfaceId == type(IERC721Metadata).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0\\n            ? string(abi.encodePacked(baseURI, tokenId.toString()))\\n            : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden\\n     * in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        private returns (bool)\\n    {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    // solhint-disable-next-line no-inline-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\n}\\n\",\"keccak256\":\"0x2d9f9af8b84d252e0e7ee716e4cb3ad1b58f3ec6619e4f54f40d4b5e28f75eb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xc1c941ad1e580b4623007305921efe2f26fc7320a4edc226234dd707c658a428\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x96877bb2eb8ca360e949ee1bd77b47a14e92e42f79897c350f088f87a3c231d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping (uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd03f5c3d258a9b0f751a3246e0802106585561ab5909b808368759364fc786f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb8d11e77eb1ed34a33720edb551d7d6a6b0eee2bfaa40a7024020e1fdf879b16\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x62d306ff0499a11913bc60b5939eec619509b5c67b30e86ebf8b8bda0b7a7fee\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x456e9b3a2bfe189b5249857f624f4139e59331db518483b456c4e587a20552e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/features/StatefulURI.sol\":{\"content\":\"// contracts/utilities/StatefulURI.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\ncontract StatefulURI is ERC721URIStorage {\\n\\tusing Counters for Counters.Counter;\\n\\tCounters.Counter private _tokenIds;\\n\\n\\tevent StateUpdated(uint256 tokenId, uint8 state);\\n\\n\\tstring public baseURI;\\n\\tuint8 public states;\\n\\tmapping(uint256 => uint8) private tokenStates;\\n\\tbool public renewable;\\n\\n\\tstruct Asset {\\n\\t\\tstring asset;\\n\\t\\taddress author;\\n\\t\\tuint256 price;\\n\\t\\tuint256 limit;\\n\\t}\\n\\tmapping(uint256 => uint256) public tokenAssets;\\n\\tAsset[] public assets;\\n\\n\\tconstructor(\\n\\t\\tstring memory name,\\n\\t\\tstring memory symbol,\\n\\t\\tstring memory baseURI_,\\n\\t\\tuint8 states_,\\n\\t\\tbool renewable_\\n\\t) ERC721(name, symbol) {\\n\\t\\tbaseURI = baseURI_;\\n\\t\\tstates = states_;\\n\\t\\trenewable = renewable_;\\n\\t}\\n\\n\\tfunction totalAssets() public view returns (uint256 total) {\\n\\t\\ttotal = assets.length;\\n\\t}\\n\\n\\tfunction getAsset(uint256 tokenId) public view returns (uint256 asset) {\\n\\t\\tasset = tokenAssets[tokenId];\\n\\t}\\n\\n\\tfunction tokenAsset(uint256 tokenId) internal view returns (Asset memory asset) {\\n\\t\\tasset = assets[tokenAssets[tokenId]];\\n\\t}\\n\\n\\tfunction _mintItem(address to, uint256 index) internal returns (uint256) {\\n\\t\\trequire(index < totalAssets(), \\\"Asset invalid\\\");\\n\\t\\t_tokenIds.increment();\\n\\n\\t\\tuint256 newItemId = _tokenIds.current();\\n\\t\\ttokenAssets[newItemId] = index;\\n\\t\\t_mint(to, newItemId);\\n\\n\\t\\treturn newItemId;\\n\\t}\\n\\n\\tfunction tokenState(uint256 tokenId) public view returns (uint8) {\\n\\t\\treturn tokenStates[tokenId];\\n\\t}\\n\\n\\tmodifier onlyState(uint256 tokenId, uint8 state) {\\n\\t\\trequire(tokenState(tokenId) == state, \\\"State invalid\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction setTokenState(uint256 tokenId, uint8 state) internal {\\n\\t\\trequire(state < states, \\\"Invalid state\\\");\\n\\t\\ttokenStates[tokenId] = state;\\n\\t\\temit StateUpdated(tokenId, state);\\n\\t}\\n\\n\\tfunction renewState(uint256 tokenId) internal {\\n\\t\\trequire(renewable, \\\"Token is not renewable\\\");\\n\\t\\tsetTokenState(tokenId, 0);\\n\\t}\\n\\n\\tfunction setBaseURI(string memory baseURI_) private {\\n\\t\\trequire(bytes(baseURI_).length > 0, \\\"Invalid URI\\\");\\n\\t\\tbaseURI = baseURI_;\\n\\t}\\n\\n\\tfunction tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n\\t\\treturn\\n\\t\\t\\tstring(abi.encodePacked(baseURI, tokenAsset(tokenId).asset, \\\"/\\\", Strings.toString(tokenStates[tokenId])));\\n\\t}\\n\\n\\tmodifier onlyNFTOwner(uint256 tokenId, address owner) {\\n\\t\\trequire(ownerOf(tokenId) == owner, \\\"Permission denied\\\");\\n\\t\\t_;\\n\\t}\\n}\\n\",\"keccak256\":\"0x4bf727f3bfd6e47ffe4b7d333e0e7b76dfdd4e3df49262019d0ec50dbbc28651\",\"license\":\"MIT\"},\"contracts/features/UtilityBase.sol\":{\"content\":\"// contracts/utilities/UtilityBase.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./StatefulURI.sol\\\";\\nimport \\\"./Vault.sol\\\";\\nimport \\\"../interfaces/IUTBFactory.sol\\\";\\nimport \\\"../interfaces/IERC20Token.sol\\\";\\n\\ncontract UtilityBase is StatefulURI, Vault {\\n\\tevent FactorySet(address factory);\\n\\n\\tevent AssetAdded(uint256 assetId, Asset asset);\\n\\tevent AssetDiscounted(uint256 assetId, uint256 discount);\\n\\tevent RewardClaimed(uint256 assetId, uint256 amount);\\n\\tevent RewardsClaimed(address author, uint256 amount);\\n\\n\\tIUTBFactory public factory;\\n\\n\\tuint8 public constant discountPercent = 10;\\n\\tmapping(uint256 => uint256) public discounts;\\n\\n\\tuint8 public constant rewardPercent = 20;\\n\\tuint8 public constant renewPercent = 50;\\n\\tmapping(address => uint256[]) public authorAssets;\\n\\tmapping(uint256 => uint256) private rewardClaims;\\n\\tmapping(uint256 => uint256) private reserveClaims;\\n\\n\\tuint8 public constant pointPercent = 20;\\n\\n\\tmapping(uint256 => uint256) public mints;\\n\\tmapping(uint256 => uint256) public mintWithPoints;\\n\\tmapping(uint256 => uint256) public mintWithDiscounts;\\n\\n\\tconstructor(\\n\\t\\tstring memory name,\\n\\t\\tstring memory symbol,\\n\\t\\tstring memory baseURI,\\n\\t\\tuint8 states,\\n\\t\\tbool renewable\\n\\t) StatefulURI(name, symbol, baseURI, states, renewable) {}\\n\\n\\tfunction point() public view returns (IERC20Token token) {\\n\\t\\ttoken = IERC20Token(factory.getToken());\\n\\t}\\n\\n\\tfunction getFactory() external view returns (address) {\\n\\t\\treturn address(factory);\\n\\t}\\n\\n\\tfunction setFactory(address _factory) external onlyOwner {\\n\\t\\trequire(_factory != address(0) && _factory != address(factory), \\\"Factory invalid\\\");\\n\\t\\trequire(address(factory) == address(0), \\\"Factory exists\\\");\\n\\t\\tfactory = IUTBFactory(_factory);\\n\\t\\tVault.setPointToken(factory.getToken());\\n\\t\\temit FactorySet(_factory);\\n\\t}\\n\\n\\tmodifier onlyFactory() {\\n\\t\\trequire(msg.sender == address(factory), \\\"Permission denied\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier hasPoint() {\\n\\t\\tIERC20Token token = point();\\n\\t\\trequire(token.isCenter(address(this)), \\\"Point token not set\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction registerAsset(\\n\\t\\taddress author,\\n\\t\\tstring memory asset,\\n\\t\\tuint256 price,\\n\\t\\tuint256 limit\\n\\t) external onlyFactory {\\n\\t\\trequire(author != address(0), \\\"Author invalid\\\");\\n\\t\\trequire(bytes(asset).length > 0, \\\"Asset invalid\\\");\\n\\t\\trequire(price > 0, \\\"Price invalid\\\");\\n\\t\\trequire(limit > 0, \\\"Amount invalid\\\");\\n\\t\\tuint256 assetId = assets.length;\\n\\t\\tassets.push(Asset(asset, author, price, limit));\\n\\t\\tauthorAssets[author].push(assetId);\\n\\t\\temit AssetAdded(assetId, assets[assetId]);\\n\\t}\\n\\n\\tmodifier onlyAuthor(uint256 assetId) {\\n\\t\\trequire(assetId < totalAssets(), \\\"Asset invalid\\\");\\n\\t\\trequire(assets[assetId].author == msg.sender, \\\"Permission denied\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction registerDiscount(uint256 assetId, uint256 discount_) public onlyAuthor(assetId) {\\n\\t\\trequire(discount_ > block.timestamp, \\\"Discount invalid\\\");\\n\\t\\trequire(discounts[assetId] <= block.timestamp, \\\"Discounted already\\\");\\n\\n\\t\\tdiscounts[assetId] = discount_;\\n\\t\\temit AssetDiscounted(assetId, discounts[assetId]);\\n\\t}\\n\\n\\tfunction discount(uint256 assetId) public view returns (uint256 discounted) {\\n\\t\\tdiscounted = discounts[assetId];\\n\\t}\\n\\n\\tfunction isDiscount(uint256 assetId) internal view returns (bool discounted) {\\n\\t\\tdiscounted = discounts[assetId] > block.timestamp;\\n\\t}\\n\\n\\tfunction feeOrigin(uint256 assetId) public view returns (uint256) {\\n\\t\\treturn assets[assetId].price;\\n\\t}\\n\\n\\tfunction fee(uint256 assetId) public view returns (uint256) {\\n\\t\\tif (isDiscount(assetId)) {\\n\\t\\t\\treturn (feeOrigin(assetId) * (100 - discountPercent)) / 100;\\n\\t\\t} else {\\n\\t\\t\\treturn feeOrigin(assetId);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction feePointOrigin(uint256 assetId) public view returns (uint256) {\\n\\t\\tIERC20Token token = point();\\n\\t\\treturn assets[assetId].price / token.pointRate();\\n\\t}\\n\\n\\tfunction feePoint(uint256 assetId) public view returns (uint256) {\\n\\t\\tIERC20Token token = point();\\n\\t\\treturn fee(assetId) / token.pointRate();\\n\\t}\\n\\n\\tmodifier onlyOnSale(uint256 assetId) {\\n\\t\\trequire(assetId < totalAssets(), \\\"Asset invalid\\\");\\n\\t\\trequire((mints[assetId] + mintWithPoints[assetId]) <= assets[assetId].limit, \\\"Fully minted already\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction _buyItem(uint256 assetId, address to) internal returns (uint256) {\\n\\t\\tmints[assetId] += 1;\\n\\t\\tif (isDiscount(assetId)) {\\n\\t\\t\\tlockedETH += (assets[assetId].price * (rewardPercent - discountPercent)) / 100;\\n\\t\\t\\tmintWithDiscounts[assetId] += 1;\\n\\t\\t} else {\\n\\t\\t\\tlockedETH += (assets[assetId].price * rewardPercent) / 100;\\n\\t\\t}\\n\\t\\treturn _mintItem(to, assetId);\\n\\t}\\n\\n\\tfunction buyItem(uint256 assetId) public payable onlyOnSale(assetId) returns (uint256) {\\n\\t\\trequire(msg.value >= fee(assetId), \\\"Fee insufficient\\\");\\n\\t\\treturn _buyItem(assetId, msg.sender);\\n\\t}\\n\\n\\tfunction buyItemTo(uint256 assetId, address to) public payable onlyOnSale(assetId) returns (uint256) {\\n\\t\\trequire(msg.value >= fee(assetId), \\\"Fee insufficient\\\");\\n\\t\\treturn _buyItem(assetId, to);\\n\\t}\\n\\n\\tmodifier onlyPoints(uint256 assetId) {\\n\\t\\trequire(assetId < totalAssets(), \\\"Asset invalid\\\");\\n\\t\\trequire(mintWithPoints[assetId] < ((assets[assetId].limit * (pointPercent)) / 100), \\\"Fully minted with points\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction _mintItemWithPoints(address to, uint256 assetId) internal hasPoint returns (uint256) {\\n\\t\\tIERC20Token token = point();\\n\\t\\trequire(token.balanceOf(msg.sender) >= feePoint(assetId), \\\"Point insufficient\\\");\\n\\n\\t\\ttoken.transferFrom(msg.sender, address(this), feePoint(assetId));\\n\\t\\tmintWithPoints[assetId] += 1;\\n\\n\\t\\treturn _mintItem(to, assetId);\\n\\t}\\n\\n\\tfunction buyItemWithPoints(uint256 assetId) public onlyPoints(assetId) returns (uint256) {\\n\\t\\treturn _mintItemWithPoints(msg.sender, assetId);\\n\\t}\\n\\n\\tfunction buyItemWithPointsTo(uint256 assetId, address to) public onlyPoints(assetId) returns (uint256) {\\n\\t\\treturn _mintItemWithPoints(to, assetId);\\n\\t}\\n\\n\\tfunction reward(uint256 assetId) public view returns (uint256) {\\n\\t\\tuint256 mintReward = (mints[assetId] * assets[assetId].price * rewardPercent) / 100;\\n\\t\\tuint256 discounted = (mintWithDiscounts[assetId] * assets[assetId].price * discountPercent) / 100;\\n\\t\\treturn mintReward - discounted - rewardClaims[assetId];\\n\\t}\\n\\n\\tfunction claim(uint256 assetId) public onlyAuthor(assetId) {\\n\\t\\tuint256 _reward = reward(assetId);\\n\\t\\trequire(_reward > 0, \\\"Reward insufficient\\\");\\n\\t\\trewardClaims[assetId] += _reward;\\n\\t\\tpayable(assets[assetId].author).transfer(_reward);\\n\\t\\temit RewardClaimed(assetId, _reward);\\n\\t}\\n\\n\\tfunction rewards(address author) public view returns (uint256) {\\n\\t\\tuint256[] memory _assets = authorAssets[author];\\n\\t\\tuint256 totalRewards = 0;\\n\\t\\tfor (uint256 i = 0; i < _assets.length; i++) {\\n\\t\\t\\ttotalRewards += reward(_assets[i]);\\n\\t\\t}\\n\\t\\treturn totalRewards;\\n\\t}\\n\\n\\tfunction claimRewards() public {\\n\\t\\taddress author = msg.sender;\\n\\t\\tuint256[] memory _assets = authorAssets[author];\\n\\t\\tuint256 totalRewards = 0;\\n\\t\\tfor (uint256 i = 0; i < _assets.length; i++) {\\n\\t\\t\\tuint256 _reward = reward(_assets[i]);\\n\\t\\t\\tif (_reward > 0) {\\n\\t\\t\\t\\trewardClaims[_assets[i]] += _reward;\\n\\t\\t\\t\\ttotalRewards += _reward;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\trequire(totalRewards > 0, \\\"Reward insufficient\\\");\\n\\t\\tpayable(author).transfer(totalRewards);\\n\\t\\temit RewardsClaimed(author, totalRewards);\\n\\t}\\n\\n\\tfunction withdraw() public onlyOwner {\\n\\t\\trequire(address(this).balance > lockedETH, \\\"Amount insufficient\\\");\\n\\t\\tuint256 funds = address(this).balance - lockedETH;\\n\\t\\tif (owner() == factory.owner()) {\\n\\t\\t\\tfactory.raiseFunds{ value: funds }();\\n\\t\\t} else {\\n\\t\\t\\tuint256 factoryFund = (funds * 5) / 100;\\n\\t\\t\\tfunds = funds - factoryFund;\\n\\t\\t\\tfactory.raiseFunds{ value: factoryFund }();\\n\\t\\t\\tpayable(owner()).transfer(funds);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction withdrawPoints() public hasPoint onlyOwner {\\n\\t\\tIERC20Token token = point();\\n\\t\\trequire(token.balanceOf(address(this)) > lockedPoints, \\\"Amount insufficient\\\");\\n\\t\\tuint256 available = token.balanceOf(address(this)) - lockedPoints;\\n\\t\\tuint256 half = available / 2;\\n\\t\\ttoken.burn(available / 2);\\n\\t\\tavailable = available - half;\\n\\t\\ttoken.transfer(address(token), available);\\n\\t\\ttoken.swapAndLiquify(available);\\n\\t}\\n\\n\\tfunction claimDeposits(uint256 tokenId) public virtual override onlyNFTOwner(tokenId, msg.sender) {\\n\\t\\tVault.claimDeposits(tokenId);\\n\\t}\\n}\\n\",\"keccak256\":\"0x304b0dc4c99481c7165354511f6e213b98dd2c7105a3e697b9945ac21ec2c2e0\",\"license\":\"MIT\"},\"contracts/features/Vault.sol\":{\"content\":\"// contracts/utilities/UTBGiftBox.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\ncontract Vault is Ownable {\\n\\tstruct TkERC1155 {\\n\\t\\tuint256 tokenId;\\n\\t\\tuint256 amount;\\n\\t}\\n\\n\\tuint256 public lockedETH;\\n\\taddress private pointToken;\\n\\tuint256 public lockedPoints;\\n\\tmapping(uint256 => uint256) private deposits;\\n\\tmapping(uint256 => address[]) private tokenERC20s;\\n\\tmapping(uint256 => mapping(address => uint256)) private depositERC20s;\\n\\tmapping(uint256 => address[]) private tokenERC721s;\\n\\tmapping(uint256 => mapping(address => uint256[])) private depositERC721s;\\n\\tmapping(uint256 => address[]) private tokenERC1155s;\\n\\tmapping(uint256 => mapping(address => TkERC1155[])) private depositERC1155s;\\n\\n\\tfunction setPointToken(address pointToken_) internal {\\n\\t\\tpointToken = pointToken_;\\n\\t}\\n\\n\\tfunction deposit(uint256 tokenId) public payable virtual {\\n\\t\\trequire(msg.value > 0, \\\"Amount insufficient\\\");\\n\\t\\tdeposits[tokenId] += msg.value;\\n\\t\\tlockedETH += msg.value;\\n\\t}\\n\\n\\tfunction depositERC20(\\n\\t\\tuint256 tokenId,\\n\\t\\taddress token,\\n\\t\\tuint256 amount\\n\\t) public virtual {\\n\\t\\trequire(token != address(0), \\\"Token invalid\\\");\\n\\t\\trequire(amount > 0, \\\"Amount insufficient\\\");\\n\\t\\tIERC20(token).transferFrom(msg.sender, address(this), amount);\\n\\t\\tif (depositERC20s[tokenId][token] == 0) {\\n\\t\\t\\ttokenERC20s[tokenId].push(token);\\n\\t\\t}\\n\\t\\tif (token == pointToken) {\\n\\t\\t\\tlockedPoints += amount;\\n\\t\\t}\\n\\t\\tdepositERC20s[tokenId][token] += amount;\\n\\t}\\n\\n\\tfunction depositERC721(\\n\\t\\tuint256 tokenId,\\n\\t\\taddress erc721Token,\\n\\t\\tuint256 erc721TokenId\\n\\t) public virtual {\\n\\t\\trequire(erc721Token != address(0), \\\"Token invalid\\\");\\n\\t\\tIERC721(erc721Token).transferFrom(msg.sender, address(this), erc721TokenId);\\n\\t\\tif (depositERC721s[tokenId][erc721Token].length == 0) {\\n\\t\\t\\ttokenERC721s[tokenId].push(erc721Token);\\n\\t\\t}\\n\\t\\tdepositERC721s[tokenId][erc721Token].push(erc721TokenId);\\n\\t}\\n\\n\\tfunction depositERC1155(\\n\\t\\tuint256 tokenId,\\n\\t\\taddress erc1155Token,\\n\\t\\tuint256 erc1155TokenId,\\n\\t\\tuint256 erc1155TokenAmount\\n\\t) public virtual {\\n\\t\\trequire(erc1155Token != address(0), \\\"Token invalid\\\");\\n\\t\\trequire(erc1155TokenAmount > 0, \\\"Amount insufficient\\\");\\n\\t\\tIERC1155(erc1155Token).safeTransferFrom(msg.sender, address(this), erc1155TokenId, erc1155TokenAmount, \\\"0x00\\\");\\n\\t\\tif (depositERC1155s[tokenId][erc1155Token].length == 0) {\\n\\t\\t\\ttokenERC1155s[tokenId].push(erc1155Token);\\n\\t\\t}\\n\\t\\tdepositERC1155s[tokenId][erc1155Token].push(TkERC1155(erc1155TokenId, erc1155TokenAmount));\\n\\t}\\n\\n\\tfunction viewETH(uint256 tokenId) public view virtual returns (uint256 amount) {\\n\\t\\tamount = deposits[tokenId];\\n\\t}\\n\\n\\tfunction viewERC20s(uint256 tokenId) public view virtual returns (address[] memory tokens) {\\n\\t\\ttokens = tokenERC20s[tokenId];\\n\\t}\\n\\n\\tfunction viewERC20Amount(uint256 tokenId, address token) public view virtual returns (uint256 amount) {\\n\\t\\tamount = depositERC20s[tokenId][token];\\n\\t}\\n\\n\\tfunction viewERC721s(uint256 tokenId) public view virtual returns (address[] memory tokens) {\\n\\t\\ttokens = tokenERC721s[tokenId];\\n\\t}\\n\\n\\tfunction viewERC721Ids(uint256 tokenId, address token) public view virtual returns (uint256[] memory amount) {\\n\\t\\tamount = depositERC721s[tokenId][token];\\n\\t}\\n\\n\\tfunction viewERC1155s(uint256 tokenId) public view virtual returns (address[] memory tokens) {\\n\\t\\ttokens = tokenERC1155s[tokenId];\\n\\t}\\n\\n\\tfunction viewERC1155Ids(uint256 tokenId, address token) public view virtual returns (TkERC1155[] memory amount) {\\n\\t\\tamount = depositERC1155s[tokenId][token];\\n\\t}\\n\\n\\tfunction claimDeposits(uint256 tokenId) public virtual {\\n\\t\\tif (deposits[tokenId] > 0) {\\n\\t\\t\\tlockedETH -= deposits[tokenId];\\n\\t\\t\\tpayable(msg.sender).transfer(deposits[tokenId]);\\n\\t\\t\\tdelete deposits[tokenId];\\n\\t\\t}\\n\\n\\t\\tif (tokenERC20s[tokenId].length > 0) {\\n\\t\\t\\tmapping(address => uint256) storage tokenDeposits = depositERC20s[tokenId];\\n\\t\\t\\tfor (uint256 i = 0; i < tokenERC20s[tokenId].length; i++) {\\n\\t\\t\\t\\tif (tokenERC20s[tokenId][i] == pointToken) {\\n\\t\\t\\t\\t\\tlockedPoints -= tokenDeposits[tokenERC20s[tokenId][i]];\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tIERC20(tokenERC20s[tokenId][i]).transfer(msg.sender, tokenDeposits[tokenERC20s[tokenId][i]]);\\n\\t\\t\\t\\tdelete depositERC20s[tokenId][tokenERC20s[tokenId][i]];\\n\\t\\t\\t}\\n\\t\\t\\tdelete tokenERC20s[tokenId];\\n\\t\\t}\\n\\n\\t\\tif (tokenERC721s[tokenId].length > 0) {\\n\\t\\t\\tmapping(address => uint256[]) storage tokenDeposits = depositERC721s[tokenId];\\n\\t\\t\\tfor (uint256 i = 0; i < tokenERC721s[tokenId].length; i++) {\\n\\t\\t\\t\\tfor (uint256 j = 0; j < tokenERC721s[tokenId].length; j++) {\\n\\t\\t\\t\\t\\tIERC721(tokenERC721s[tokenId][i]).transferFrom(\\n\\t\\t\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\t\\t\\ttokenDeposits[tokenERC721s[tokenId][i]][j]\\n\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tdelete depositERC20s[tokenId][tokenERC721s[tokenId][i]];\\n\\t\\t\\t}\\n\\t\\t\\tdelete tokenERC721s[tokenId];\\n\\t\\t}\\n\\n\\t\\tif (tokenERC1155s[tokenId].length > 0) {\\n\\t\\t\\tfor (uint256 i = 0; i < tokenERC1155s[tokenId].length; i++) {\\n\\t\\t\\t\\tfor (uint256 j = 0; j < depositERC1155s[tokenId][tokenERC1155s[tokenId][i]].length; j++) {\\n\\t\\t\\t\\t\\tIERC1155(tokenERC1155s[tokenId][i]).safeTransferFrom(\\n\\t\\t\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\t\\t\\tdepositERC1155s[tokenId][tokenERC1155s[tokenId][i]][j].tokenId,\\n\\t\\t\\t\\t\\t\\tdepositERC1155s[tokenId][tokenERC1155s[tokenId][i]][j].amount,\\n\\t\\t\\t\\t\\t\\t\\\"0x01\\\"\\n\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tdelete depositERC20s[tokenId][tokenERC1155s[tokenId][i]];\\n\\t\\t\\t}\\n\\t\\t\\tdelete tokenERC1155s[tokenId];\\n\\t\\t}\\n\\t}\\n\\n\\tfunction escapeERC20(\\n\\t\\taddress to,\\n\\t\\taddress token,\\n\\t\\tuint256 amount\\n\\t) public onlyOwner {\\n\\t\\trequire(amount > 0 && amount <= IERC20(token).balanceOf(address(this)), \\\"Amount insufficient\\\");\\n\\t\\tIERC20(token).transfer(to, amount);\\n\\t}\\n\\n\\tfunction escapeERC721(\\n\\t\\taddress to,\\n\\t\\taddress token,\\n\\t\\tuint256 tokenId\\n\\t) public onlyOwner {\\n\\t\\trequire(IERC721(token).ownerOf(tokenId) == address(this), \\\"Token invalid\\\");\\n\\t\\tIERC721(token).transferFrom(address(this), to, tokenId);\\n\\t}\\n\\n\\tfunction escapeERC1155(\\n\\t\\taddress to,\\n\\t\\taddress token,\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 amount\\n\\t) public onlyOwner {\\n\\t\\trequire(IERC1155(token).balanceOf(address(this), tokenId) >= amount, \\\"Token invalid\\\");\\n\\t\\trequire(amount > 0, \\\"Amount insufficient\\\");\\n\\t\\tIERC1155(token).safeTransferFrom(address(this), to, tokenId, amount, \\\"0x01\\\");\\n\\t}\\n\\n\\tfunction onERC1155Received(\\n\\t\\taddress,\\n\\t\\taddress,\\n\\t\\tuint256,\\n\\t\\tuint256,\\n\\t\\tbytes calldata\\n\\t) external pure returns (bytes4) {\\n\\t\\treturn 0xf23a6e61;\\n\\t}\\n\\n\\tfunction onERC1155BatchReceived(\\n\\t\\taddress,\\n\\t\\taddress,\\n\\t\\tuint256[] memory,\\n\\t\\tuint256[] memory,\\n\\t\\tbytes memory\\n\\t) public virtual returns (bytes4) {\\n\\t\\treturn 0xf23a6e61;\\n\\t}\\n}\\n\",\"keccak256\":\"0xdb62892fde920455d2af536ad50750e54777517ce3045daa7b4a5e89117dec67\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Token.sol\":{\"content\":\"// contracts/utilities/IERC20Token.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20Token {\\n\\tfunction pointRate() external view returns (uint256);\\n\\n\\tfunction getUniswapRouter() external view returns (address);\\n\\n\\tfunction getUniswapPair() external view returns (address);\\n\\n\\tfunction swapAndLiquify(uint256) external;\\n\\n\\tfunction isCenter(address) external view returns (bool);\\n\\n\\tfunction balanceOf(address) external view returns (uint256);\\n\\n\\tfunction addCenter(address) external;\\n\\n\\tfunction removeCenter(address) external;\\n\\n\\tfunction mint(address to, uint256 amount) external;\\n\\n\\tfunction transfer(address to, uint256 amount) external;\\n\\n\\tfunction transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t) external;\\n\\n\\tfunction approve(address spender, uint256 amount) external;\\n\\n\\tfunction burn(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x8eb13d5ee33446dae0be711e1d35852ccfd23c56ec320b64bd4a47ca8fd15b8f\",\"license\":\"MIT\"},\"contracts/interfaces/IUTBFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IUTBFactory {\\n\\tfunction owner() external view returns (address);\\n\\n\\tfunction getToken() external view returns (address);\\n\\n\\tfunction raiseFunds() external payable;\\n}\\n\",\"keccak256\":\"0x42dcdefafa00d14558bf2d8c1743b26af0176c7030ab37682b63322c2cd8e189\",\"license\":\"MIT\"},\"contracts/products/UTBGiftBox.sol\":{\"content\":\"// contracts/utilities/UTBGiftBox.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../features/UtilityBase.sol\\\";\\n\\ncontract UTBGiftBox is UtilityBase {\\n\\tuint8 constant STATE_NORMAL = 0;\\n\\tuint8 constant STATE_READY = 1;\\n\\tuint8 constant STATE_SURPRISE = 2;\\n\\n\\tuint256 constant REWARD_WRAP = 20;\\n\\tuint256 constant REWARD_OPEN = 5;\\n\\n\\tconstructor(string memory baseURI) UtilityBase(\\\"Utilitybia - Gift Box\\\", \\\"UTBGiftBox\\\", baseURI, 3, false) {}\\n\\n\\tfunction wrap(uint256 tokenId) public onlyNFTOwner(tokenId, msg.sender) onlyState(tokenId, STATE_NORMAL) {\\n\\t\\tsetTokenState(tokenId, STATE_READY);\\n\\t\\tuint256 points = (feePointOrigin(tokenAssets[tokenId]) * REWARD_WRAP) / 100;\\n\\t\\tpoint().mint(msg.sender, points);\\n\\t}\\n\\n\\tfunction deposit(uint256 tokenId) public payable virtual override onlyState(tokenId, STATE_NORMAL) {\\n\\t\\tVault.deposit(tokenId);\\n\\t}\\n\\n\\tfunction depositAndWrap(uint256 tokenId) public payable {\\n\\t\\tdeposit(tokenId);\\n\\t\\twrap(tokenId);\\n\\t}\\n\\n\\tfunction depositERC20(\\n\\t\\tuint256 tokenId,\\n\\t\\taddress token,\\n\\t\\tuint256 amount\\n\\t) public virtual override onlyState(tokenId, STATE_NORMAL) {\\n\\t\\tVault.depositERC20(tokenId, token, amount);\\n\\t}\\n\\n\\tfunction depositERC20AndWrap(\\n\\t\\tuint256 tokenId,\\n\\t\\taddress token,\\n\\t\\tuint256 amount\\n\\t) public {\\n\\t\\tdepositERC20(tokenId, token, amount);\\n\\t\\twrap(tokenId);\\n\\t}\\n\\n\\tfunction depositERC721(\\n\\t\\tuint256 tokenId,\\n\\t\\taddress erc721Token,\\n\\t\\tuint256 erc721TokenId\\n\\t) public virtual override onlyState(tokenId, STATE_NORMAL) {\\n\\t\\tVault.depositERC721(tokenId, erc721Token, erc721TokenId);\\n\\t}\\n\\n\\tfunction depositERC721AndWrap(\\n\\t\\tuint256 tokenId,\\n\\t\\taddress erc721Token,\\n\\t\\tuint256 erc721TokenId\\n\\t) public {\\n\\t\\tdepositERC721(tokenId, erc721Token, erc721TokenId);\\n\\t\\twrap(tokenId);\\n\\t}\\n\\n\\tfunction depositERC1155(\\n\\t\\tuint256 tokenId,\\n\\t\\taddress erc1155Token,\\n\\t\\tuint256 erc1155TokenId,\\n\\t\\tuint256 erc1155TokenAmount\\n\\t) public virtual override onlyState(tokenId, STATE_NORMAL) {\\n\\t\\tVault.depositERC1155(tokenId, erc1155Token, erc1155TokenId, erc1155TokenAmount);\\n\\t}\\n\\n\\tfunction depositERC1155AndWrap(\\n\\t\\tuint256 tokenId,\\n\\t\\taddress erc1155Token,\\n\\t\\tuint256 erc1155TokenId,\\n\\t\\tuint256 erc1155TokenAmount\\n\\t) public {\\n\\t\\tdepositERC1155(tokenId, erc1155Token, erc1155TokenId, erc1155TokenAmount);\\n\\t\\twrap(tokenId);\\n\\t}\\n\\n\\tfunction open(uint256 tokenId) public onlyNFTOwner(tokenId, msg.sender) onlyState(tokenId, STATE_READY) {\\n\\t\\tsetTokenState(tokenId, uint8(STATE_SURPRISE));\\n\\t\\tuint256 points = (feePointOrigin(tokenAssets[tokenId]) * REWARD_OPEN) / 100;\\n\\t\\tpoint().mint(msg.sender, points);\\n\\t}\\n\\n\\tfunction viewETH(uint256 tokenId) public view virtual override returns (uint256 amount) {\\n\\t\\tif (tokenState(tokenId) == uint8(STATE_SURPRISE)) {\\n\\t\\t\\tamount = Vault.viewETH(tokenId);\\n\\t\\t} else {\\n\\t\\t\\tamount = 0;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction viewERC20s(uint256 tokenId) public view virtual override returns (address[] memory tokens) {\\n\\t\\tif (tokenState(tokenId) == uint8(STATE_SURPRISE)) {\\n\\t\\t\\ttokens = Vault.viewERC20s(tokenId);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction viewERC20Amount(uint256 tokenId, address token) public view virtual override returns (uint256 amount) {\\n\\t\\tif (tokenState(tokenId) == uint8(STATE_SURPRISE)) {\\n\\t\\t\\tamount = Vault.viewERC20Amount(tokenId, token);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction viewERC721s(uint256 tokenId) public view virtual override returns (address[] memory tokens) {\\n\\t\\tif (tokenState(tokenId) == uint8(STATE_SURPRISE)) {\\n\\t\\t\\ttokens = Vault.viewERC721s(tokenId);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction viewERC721Ids(uint256 tokenId, address token)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256[] memory amount)\\n\\t{\\n\\t\\tif (tokenState(tokenId) == uint8(STATE_SURPRISE)) {\\n\\t\\t\\tamount = Vault.viewERC721Ids(tokenId, token);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction viewERC1155s(uint256 tokenId) public view virtual override returns (address[] memory tokens) {\\n\\t\\tif (tokenState(tokenId) == uint8(STATE_SURPRISE)) {\\n\\t\\t\\ttokens = Vault.viewERC1155s(tokenId);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction viewERC1155Ids(uint256 tokenId, address token)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (TkERC1155[] memory amount)\\n\\t{\\n\\t\\tif (tokenState(tokenId) == uint8(STATE_SURPRISE)) {\\n\\t\\t\\tamount = Vault.viewERC1155Ids(tokenId, token);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction claimDeposits(uint256 tokenId)\\n\\t\\tpublic\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\tonlyNFTOwner(tokenId, msg.sender)\\n\\t\\tonlyState(tokenId, STATE_SURPRISE)\\n\\t{\\n\\t\\tVault.claimDeposits(tokenId);\\n\\t}\\n}\\n\",\"keccak256\":\"0x20bc04044a36f3de472cb5ecfbb8526acbd6f93510abe20397e540e859b5cc05\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620062483803806200624883398101604081905262000034916200020f565b6040518060400160405280601581526020017f5574696c697479626961202d204769667420426f7800000000000000000000008152506040518060400160405280600a8152602001690aaa8848ed2cce884def60b31b8152508260036000848484848484848160009080519060200190620000b192919062000169565b508051620000c790600190602084019062000169565b50508351620000df9150600890602086019062000169565b506009805460ff90931660ff19938416179055600b80549115159190921617905550600091506200010f90503390565b600e80546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35050505050505062000338565b8280546200017790620002e5565b90600052602060002090601f0160209004810192826200019b5760008555620001e6565b82601f10620001b657805160ff1916838001178555620001e6565b82800160010185558215620001e6579182015b82811115620001e6578251825591602001919060010190620001c9565b50620001f4929150620001f8565b5090565b5b80821115620001f45760008155600101620001f9565b6000602080838503121562000222578182fd5b82516001600160401b038082111562000239578384fd5b818501915085601f8301126200024d578384fd5b81518181111562000262576200026262000322565b604051601f8201601f19908116603f011681019083821181831017156200028d576200028d62000322565b816040528281528886848701011115620002a5578687fd5b8693505b82841015620002c85784840186015181850187015292850192620002a9565b82841115620002d957868684830101525b98975050505050505050565b600181811c90821680620002fa57607f821691505b602082108114156200031c57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b615f0080620003486000396000f3fe6080604052600436106104685760003560e01c80638282d88c1161024a578063b6b55f2511610139578063db799904116100b6578063eac8f5b81161007a578063eac8f5b814610dde578063f23a6e6114610e0b578063f2fde38b14610e38578063f7087e0d14610e58578063f709c59d14610e8557600080fd5b8063db79990414610d3c578063e128467314610d4f578063e7fb74c714610d62578063e985e9c514610d75578063ea598cb014610dbe57600080fd5b8063c45a0155116100fd578063c45a015514610cac578063c87b56dd14610ccc578063cf35bdd014610cec578063d03020511461069a578063d37eedfe14610d1c57600080fd5b8063b6b55f2514610be7578063b88d4fde14610bfa578063bae6a69014610c1a578063bc197c8114610c47578063bfea733a14610c8c57600080fd5b8063999e4c95116101c7578063a66f90731161018b578063a66f907314610b3a578063a748fdf014610b5a578063a9fb763c14610b7a578063b0facab314610b9a578063b5d3542314610bba57600080fd5b8063999e4c9514610aa55780639f6cf0b114610ac5578063a22cb46514610ae5578063a361881514610b05578063a39ce20c14610b1a57600080fd5b80639495e6f81161020e5780639495e6f814610a0a57806395d89b4114610a2a578063966be72f14610a3f5780639745cc3d14610a5f578063975cbc3214610a8f57600080fd5b80638282d88c14610978578063881aba511461099857806388cc58e4146109ae5780638da5cb5b146109cc5780638fa10dc8146109ea57600080fd5b80633ccfd60b116103665780636696185d116102e35780636c0360eb116102a75780636c0360eb146108e75780636ef18867146108fc57806370a0823114610929578063715018a61461094957806382482f7c1461095e57600080fd5b80636696185d14610852578063685f8e5b14610872578063690e7c0914610892578063695fcae5146108b25780636ab638c5146108c757600080fd5b806357c8dbbf1161032a57806357c8dbbf146107a55780635882e195146107c55780635bb47808146107e55780636350b2c2146108055780636352211e1461083257600080fd5b80633ccfd60b146107045780633d8b738e1461071957806342842e0e146107395780634709384f1461075957806353f6fa251461077957600080fd5b80631b7dc10e116103f4578063326ccdf4116103b8578063326ccdf41461067a578063331f63c31461069a578063372500ab146106af578063379607f5146106c457806339b37ab0146106e457600080fd5b80631b7dc10e146105e457806323b872dd1461060457806329c250f11461062457806329ef19191461063e5780632ba9fcd51461066557600080fd5b8063081812fc1161043b578063081812fc146105035780630924f15d1461053b578063095ea7b3146105685780630b1d07de1461058a578063162033b6146105b757600080fd5b806301e1d1141461046d57806301ffc9a71461049157806306fdde03146104c15780630700037d146104e3575b600080fd5b34801561047957600080fd5b50600d545b6040519081526020015b60405180910390f35b34801561049d57600080fd5b506104b16104ac366004615714565b610ea5565b6040519015158152602001610488565b3480156104cd57600080fd5b506104d6610ef7565b6040516104889190615a58565b3480156104ef57600080fd5b5061047e6104fe366004615381565b610f89565b34801561050f57600080fd5b5061052361051e36600461574c565b611050565b6040516001600160a01b039091168152602001610488565b34801561054757600080fd5b5061047e61055636600461574c565b601f6020526000908152604090205481565b34801561057457600080fd5b506105886105833660046156cd565b6110ea565b005b34801561059657600080fd5b5061047e6105a536600461574c565b6000908152601a602052604090205490565b3480156105c357600080fd5b506105d76105d236600461574c565b611200565b6040516104889190615984565b3480156105f057600080fd5b506105886105ff3660046157c6565b611234565b34801561061057600080fd5b5061058861061f36600461549b565b61124f565b34801561063057600080fd5b50600b546104b19060ff1681565b34801561064a57600080fd5b50610653600a81565b60405160ff9091168152602001610488565b34801561067157600080fd5b50610523611280565b34801561068657600080fd5b5061047e61069536600461577c565b611302565b3480156106a657600080fd5b50610653601481565b3480156106bb57600080fd5b506105886113e3565b3480156106d057600080fd5b506105886106df36600461574c565b6115b1565b3480156106f057600080fd5b5061047e6106ff36600461574c565b611755565b34801561071057600080fd5b506105886117a1565b34801561072557600080fd5b5061047e61073436600461574c565b6119f7565b34801561074557600080fd5b5061058861075436600461549b565b611ab9565b34801561076557600080fd5b5061058861077436600461574c565b611ad4565b34801561078557600080fd5b5061047e61079436600461574c565b602080526000908152604090205481565b3480156107b157600080fd5b506105886107c03660046157c6565b611b53565b3480156107d157600080fd5b506105886107e03660046157a0565b611b9c565b3480156107f157600080fd5b50610588610800366004615381565b611be4565b34801561081157600080fd5b5061047e61082036600461574c565b601e6020526000908152604090205481565b34801561083e57600080fd5b5061052361084d36600461574c565b611dad565b34801561085e57600080fd5b5061058861086d3660046157a0565b611e24565b34801561087e57600080fd5b506105d761088d36600461574c565b611e38565b34801561089e57600080fd5b506105886108ad36600461574c565b611e67565b3480156108be57600080fd5b50610653603281565b3480156108d357600080fd5b5061047e6108e236600461574c565b611f87565b3480156108f357600080fd5b506104d6611fbc565b34801561090857600080fd5b5061091c61091736600461577c565b61204a565b6040516104889190615a20565b34801561093557600080fd5b5061047e610944366004615381565b61207a565b34801561095557600080fd5b50610588612101565b34801561096a57600080fd5b506009546106539060ff1681565b34801561098457600080fd5b5061058861099336600461549b565b612175565b3480156109a457600080fd5b5061047e600f5481565b3480156109ba57600080fd5b506019546001600160a01b0316610523565b3480156109d857600080fd5b50600e546001600160a01b0316610523565b3480156109f657600080fd5b50610588610a05366004615545565b6122c3565b348015610a1657600080fd5b5061047e610a2536600461574c565b612413565b348015610a3657600080fd5b506104d66124f2565b348015610a4b57600080fd5b5061047e610a5a36600461577c565b612501565b348015610a6b57600080fd5b50610653610a7a36600461574c565b6000908152600a602052604090205460ff1690565b348015610a9b57600080fd5b5061047e60115481565b348015610ab157600080fd5b5061047e610ac03660046156cd565b612543565b348015610ad157600080fd5b5061047e610ae036600461574c565b612574565b348015610af157600080fd5b50610588610b0036600461562f565b6125b0565b348015610b1157600080fd5b50610588612675565b348015610b2657600080fd5b50610588610b353660046157ed565b6129a9565b348015610b4657600080fd5b5061047e610b5536600461574c565b612b13565b348015610b6657600080fd5b50610588610b7536600461565c565b612ba4565b348015610b8657600080fd5b5061047e610b9536600461574c565b612dff565b348015610ba657600080fd5b50610588610bb53660046157a0565b612f04565b348015610bc657600080fd5b50610bda610bd536600461577c565b612f4c565b60405161048891906159d1565b610588610bf536600461574c565b612f7c565b348015610c0657600080fd5b50610588610c153660046154db565b612fc2565b348015610c2657600080fd5b5061047e610c3536600461574c565b601a6020526000908152604090205481565b348015610c5357600080fd5b50610c73610c623660046153f1565b63f23a6e6160e01b95945050505050565b6040516001600160e01b03199091168152602001610488565b348015610c9857600080fd5b50610588610ca736600461549b565b612ff4565b348015610cb857600080fd5b50601954610523906001600160a01b031681565b348015610cd857600080fd5b506104d6610ce736600461574c565b613125565b348015610cf857600080fd5b50610d0c610d0736600461574c565b613176565b6040516104889493929190615a6b565b348015610d2857600080fd5b50610588610d373660046157a0565b61324a565b61047e610d4a36600461577c565b613255565b610588610d5d36600461574c565b613371565b61047e610d7036600461574c565b613383565b348015610d8157600080fd5b506104b1610d903660046153b9565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b348015610dca57600080fd5b50610588610dd936600461574c565b61349f565b348015610dea57600080fd5b5061047e610df936600461574c565b6000908152600c602052604090205490565b348015610e1757600080fd5b50610c73610e2636600461558a565b63f23a6e6160e01b9695505050505050565b348015610e4457600080fd5b50610588610e53366004615381565b613537565b348015610e6457600080fd5b5061047e610e7336600461574c565b600c6020526000908152604090205481565b348015610e9157600080fd5b506105d7610ea036600461574c565b613622565b60006001600160e01b031982166380ac58cd60e01b1480610ed657506001600160e01b03198216635b5e139f60e01b145b80610ef157506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060008054610f0690615deb565b80601f0160208091040260200160405190810160405280929190818152602001828054610f3290615deb565b8015610f7f5780601f10610f5457610100808354040283529160200191610f7f565b820191906000526020600020905b815481529060010190602001808311610f6257829003601f168201915b5050505050905090565b6001600160a01b0381166000908152601b6020908152604080832080548251818502810185019093528083528493830182828015610fe657602002820191906000526020600020905b815481526020019060010190808311610fd2575b505050505090506000805b82518110156110485761102a83828151811061101d57634e487b7160e01b600052603260045260246000fd5b6020026020010151612dff565b6110349083615d3a565b91508061104081615e20565b915050610ff1565b509392505050565b6000818152600260205260408120546001600160a01b03166110ce5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006110f582611dad565b9050806001600160a01b0316836001600160a01b031614156111635760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016110c5565b336001600160a01b038216148061117f575061117f8133610d90565b6111f15760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016110c5565b6111fb8383613651565b505050565b6060600261121d836000908152600a602052604090205460ff1690565b60ff16141561122f57610ef1826136bf565b919050565b61124084848484611b53565b6112498461349f565b50505050565b611259338261372b565b6112755760405162461bcd60e51b81526004016110c590615bd0565b6111fb83838361381e565b601954604080516321df0da760e01b815290516000926001600160a01b0316916321df0da7916004808301926020929190829003018186803b1580156112c557600080fd5b505afa1580156112d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fd919061539d565b905090565b60008261130e600d5490565b811061132c5760405162461bcd60e51b81526004016110c590615af5565b6064601460ff16600d838154811061135457634e487b7160e01b600052603260045260246000fd5b9060005260206000209060040201600301546113709190615d66565b61137a9190615d52565b6000828152601f6020526040902054106113d15760405162461bcd60e51b815260206004820152601860248201527746756c6c79206d696e746564207769746820706f696e747360401b60448201526064016110c5565b6113db83856139be565b949350505050565b336000818152601b602090815260408083208054825181850281018501909352808352919290919083018282801561143a57602002820191906000526020600020905b815481526020019060010190808311611426575b505050505090506000805b82518110156114eb57600061147384838151811061101d57634e487b7160e01b600052603260045260246000fd5b905080156114d85780601c60008685815181106114a057634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002060008282546114c59190615d3a565b909155506114d590508184615d3a565b92505b50806114e381615e20565b915050611445565b50600081116115325760405162461bcd60e51b815260206004820152601360248201527214995dd85c99081a5b9cdd59999a58da595b9d606a1b60448201526064016110c5565b6040516001600160a01b0384169082156108fc029083906000818181858888f19350505050158015611568573d6000803e3d6000fd5b50604080516001600160a01b0385168152602081018390527ffc30cddea38e2bf4d6ea7d3f9ed3b6ad7f176419f4963bd81318067a4aee73fe91015b60405180910390a1505050565b806115bb600d5490565b81106115d95760405162461bcd60e51b81526004016110c590615af5565b336001600160a01b0316600d828154811061160457634e487b7160e01b600052603260045260246000fd5b60009182526020909120600160049092020101546001600160a01b03161461163e5760405162461bcd60e51b81526004016110c590615b1c565b600061164983612dff565b9050600081116116915760405162461bcd60e51b815260206004820152601360248201527214995dd85c99081a5b9cdd59999a58da595b9d606a1b60448201526064016110c5565b6000838152601c6020526040812080548392906116af908490615d3a565b9091555050600d8054849081106116d657634e487b7160e01b600052603260045260246000fd5b600091825260208220600160049092020101546040516001600160a01b039091169183156108fc02918491818181858888f1935050505015801561171e573d6000803e3d6000fd5b5060408051848152602081018390527f47b0878030426a9511b1cd915a0ac34bd29f33d4f846616b55847303ff8ebcbe91016115a4565b6000818152601a6020526040812054421015611798576064611778600a82615d9c565b60ff1661178484612574565b61178e9190615d66565b610ef19190615d52565b610ef182612574565b600e546001600160a01b031633146117cb5760405162461bcd60e51b81526004016110c590615b6e565b600f5447116117ec5760405162461bcd60e51b81526004016110c590615ba3565b6000600f54476117fc9190615d85565b9050601960009054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561184c57600080fd5b505afa158015611860573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611884919061539d565b6001600160a01b031661189f600e546001600160a01b031690565b6001600160a01b0316141561191a57601960009054906101000a90046001600160a01b03166001600160a01b0316639c0e7824826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156118fe57600080fd5b505af1158015611912573d6000803e3d6000fd5b505050505050565b60006064611929836005615d66565b6119339190615d52565b905061193f8183615d85565b9150601960009054906101000a90046001600160a01b03166001600160a01b0316639c0e7824826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561199157600080fd5b505af11580156119a5573d6000803e3d6000fd5b50505050506119bc600e546001600160a01b031690565b6001600160a01b03166108fc839081150290604051600060405180830381858888f193505050501580156111fb573d6000803e3d6000fd5b50565b600080611a02611280565b9050806001600160a01b03166318ebdced6040518163ffffffff1660e01b815260040160206040518083038186803b158015611a3d57600080fd5b505afa158015611a51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a759190615764565b600d8481548110611a9657634e487b7160e01b600052603260045260246000fd5b906000526020600020906004020160020154611ab29190615d52565b9392505050565b6111fb83838360405180602001604052806000815250612fc2565b803380611ae083611dad565b6001600160a01b031614611b065760405162461bcd60e51b81526004016110c590615b1c565b82600280611b23836000908152600a602052604090205460ff1690565b60ff1614611b435760405162461bcd60e51b81526004016110c590615b47565b611b4c85613bf8565b5050505050565b83600080611b70836000908152600a602052604090205460ff1690565b60ff1614611b905760405162461bcd60e51b81526004016110c590615b47565b61191286868686614442565b82600080611bb9836000908152600a602052604090205460ff1690565b60ff1614611bd95760405162461bcd60e51b81526004016110c590615b47565b611b4c8585856145cb565b600e546001600160a01b03163314611c0e5760405162461bcd60e51b81526004016110c590615b6e565b6001600160a01b03811615801590611c3457506019546001600160a01b03828116911614155b611c725760405162461bcd60e51b815260206004820152600f60248201526e119858dd1bdc9e481a5b9d985b1a59608a1b60448201526064016110c5565b6019546001600160a01b031615611cbc5760405162461bcd60e51b815260206004820152600e60248201526d466163746f72792065786973747360901b60448201526064016110c5565b601980546001600160a01b0319166001600160a01b038316908117909155604080516321df0da760e01b81529051611d6e92916321df0da7916004808301926020929190829003018186803b158015611d1457600080fd5b505afa158015611d28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4c919061539d565b601080546001600160a01b0319166001600160a01b0392909216919091179055565b6040516001600160a01b03821681527f1edf3afd4ac789736e00d216cd88be164ddcef26a6eedcc30cdb0cb62f3741b19060200160405180910390a150565b6000818152600260205260408120546001600160a01b031680610ef15760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016110c5565b611e2f838383611b9c565b6111fb8361349f565b60606002611e55836000908152600a602052604090205460ff1690565b60ff16141561122f57610ef1826146ec565b803380611e7383611dad565b6001600160a01b031614611e995760405162461bcd60e51b81526004016110c590615b1c565b82600180611eb6836000908152600a602052604090205460ff1690565b60ff1614611ed65760405162461bcd60e51b81526004016110c590615b47565b611ee1856002614756565b6000858152600c6020526040812054606490600590611eff906119f7565b611f099190615d66565b611f139190615d52565b9050611f1d611280565b6040516340c10f1960e01b8152336004820152602481018390526001600160a01b0391909116906340c10f1990604401600060405180830381600087803b158015611f6757600080fd5b505af1158015611f7b573d6000803e3d6000fd5b50505050505050505050565b6000818152600a602052604081205460ff1660021415611fb4575060009081526012602052604090205490565b506000919050565b60088054611fc990615deb565b80601f0160208091040260200160405190810160405280929190818152602001828054611ff590615deb565b80156120425780601f1061201757610100808354040283529160200191612042565b820191906000526020600020905b81548152906001019060200180831161202557829003601f168201915b505050505081565b60606002612067846000908152600a602052604090205460ff1690565b60ff161415610ef157611ab283836147f8565b60006001600160a01b0382166120e55760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016110c5565b506001600160a01b031660009081526003602052604090205490565b600e546001600160a01b0316331461212b5760405162461bcd60e51b81526004016110c590615b6e565b600e546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600e80546001600160a01b0319169055565b600e546001600160a01b0316331461219f5760405162461bcd60e51b81526004016110c590615b6e565b60008111801561222557506040516370a0823160e01b81523060048201526001600160a01b038316906370a082319060240160206040518083038186803b1580156121e957600080fd5b505afa1580156121fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122219190615764565b8111155b6122415760405162461bcd60e51b81526004016110c590615ba3565b60405163a9059cbb60e01b81526001600160a01b0384811660048301526024820183905283169063a9059cbb90604401602060405180830381600087803b15801561228b57600080fd5b505af115801561229f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124991906156f8565b600e546001600160a01b031633146122ed5760405162461bcd60e51b81526004016110c590615b6e565b604051627eeac760e11b81523060048201526024810183905281906001600160a01b0385169062fdd58e9060440160206040518083038186803b15801561233357600080fd5b505afa158015612347573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061236b9190615764565b10156123895760405162461bcd60e51b81526004016110c590615c21565b600081116123a95760405162461bcd60e51b81526004016110c590615ba3565b604051637921219560e11b81526001600160a01b0384169063f242432a906123db90309088908790879060040161593f565b600060405180830381600087803b1580156123f557600080fd5b505af1158015612409573d6000803e3d6000fd5b5050505050505050565b60008161241f600d5490565b811061243d5760405162461bcd60e51b81526004016110c590615af5565b6064601460ff16600d838154811061246557634e487b7160e01b600052603260045260246000fd5b9060005260206000209060040201600301546124819190615d66565b61248b9190615d52565b6000828152601f6020526040902054106124e25760405162461bcd60e51b815260206004820152601860248201527746756c6c79206d696e746564207769746820706f696e747360401b60448201526064016110c5565b611ab233846139be565b50919050565b606060018054610f0690615deb565b6000828152600a602052604081205460ff1660021415610ef15760008381526014602090815260408083206001600160a01b0386168452909152902054611ab2565b601b602052816000526040600020818154811061255f57600080fd5b90600052602060002001600091509150505481565b6000600d828154811061259757634e487b7160e01b600052603260045260246000fd5b9060005260206000209060040201600201549050919050565b6001600160a01b0382163314156126095760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016110c5565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b600061267f611280565b60405163bcfee33560e01b81523060048201529091506001600160a01b0382169063bcfee3359060240160206040518083038186803b1580156126c157600080fd5b505afa1580156126d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126f991906156f8565b61273b5760405162461bcd60e51b8152602060048201526013602482015272141bda5b9d081d1bdad95b881b9bdd081cd95d606a1b60448201526064016110c5565b600e546001600160a01b031633146127655760405162461bcd60e51b81526004016110c590615b6e565b600061276f611280565b6011546040516370a0823160e01b8152306004820152919250906001600160a01b038316906370a082319060240160206040518083038186803b1580156127b557600080fd5b505afa1580156127c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ed9190615764565b1161280a5760405162461bcd60e51b81526004016110c590615ba3565b6011546040516370a0823160e01b8152306004820152600091906001600160a01b038416906370a082319060240160206040518083038186803b15801561285057600080fd5b505afa158015612864573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128889190615764565b6128929190615d85565b905060006128a1600283615d52565b90506001600160a01b0383166342966c686128bd600285615d52565b6040518263ffffffff1660e01b81526004016128db91815260200190565b600060405180830381600087803b1580156128f557600080fd5b505af1158015612909573d6000803e3d6000fd5b5050505080826129199190615d85565b60405163a9059cbb60e01b81526001600160a01b038516600482018190526024820183905291935063a9059cbb90604401600060405180830381600087803b15801561296457600080fd5b505af1158015612978573d6000803e3d6000fd5b505060405163173865ad60e01b8152600481018590526001600160a01b038616925063173865ad91506024016123db565b816129b3600d5490565b81106129d15760405162461bcd60e51b81526004016110c590615af5565b336001600160a01b0316600d82815481106129fc57634e487b7160e01b600052603260045260246000fd5b60009182526020909120600160049092020101546001600160a01b031614612a365760405162461bcd60e51b81526004016110c590615b1c565b428211612a785760405162461bcd60e51b815260206004820152601060248201526f111a5cd8dbdd5b9d081a5b9d985b1a5960821b60448201526064016110c5565b6000838152601a6020526040902054421015612acb5760405162461bcd60e51b8152602060048201526012602482015271446973636f756e74656420616c726561647960701b60448201526064016110c5565b6000838152601a602090815260409182902084905581518581529081018490527f6e9df22cc825945ccdb219977832c3a93752e87bf6b8a9d778c260da50c5003291016115a4565b600080612b1e611280565b9050806001600160a01b03166318ebdced6040518163ffffffff1660e01b815260040160206040518083038186803b158015612b5957600080fd5b505afa158015612b6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b919190615764565b612b9a84611755565b611ab29190615d52565b6019546001600160a01b03163314612bce5760405162461bcd60e51b81526004016110c590615b1c565b6001600160a01b038416612c155760405162461bcd60e51b815260206004820152600e60248201526d105d5d1a1bdc881a5b9d985b1a5960921b60448201526064016110c5565b6000835111612c365760405162461bcd60e51b81526004016110c590615af5565b60008211612c765760405162461bcd60e51b815260206004820152600d60248201526c141c9a58d9481a5b9d985b1a59609a1b60448201526064016110c5565b60008111612cb75760405162461bcd60e51b815260206004820152600e60248201526d105b5bdd5b9d081a5b9d985b1a5960921b60448201526064016110c5565b600d8054604080516080810182528681526001600160a01b0388166020808301919091529181018690526060810185905260018301845560009390935282518051929392600485027fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb50192612d309284929101906151d4565b50602082810151600183810180546001600160a01b0319166001600160a01b03938416179055604080860151600286015560609095015160039094019390935588166000908152601b825292832080549283018155835290912001819055600d80547f923a49af502d9bd4cf973995aa9df36f8f5bacfb4a326065f76b7b2f5253bfb791839182908110612dd457634e487b7160e01b600052603260045260246000fd5b9060005260206000209060040201604051612df0929190615c48565b60405180910390a15050505050565b6000806064601460ff16600d8581548110612e2a57634e487b7160e01b600052603260045260246000fd5b906000526020600020906004020160020154601e600087815260200190815260200160002054612e5a9190615d66565b612e649190615d66565b612e6e9190615d52565b905060006064600a60ff16600d8681548110612e9a57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060040201600201546020600088815260200190815260200160002054612eca9190615d66565b612ed49190615d66565b612ede9190615d52565b6000858152601c6020526040902054909150612efa8284615d85565b6113db9190615d85565b82600080612f21836000908152600a602052604090205460ff1690565b60ff1614612f415760405162461bcd60e51b81526004016110c590615b47565b611b4c85858561486c565b60606002612f69846000908152600a602052604090205460ff1690565b60ff161415610ef157611ab283836149fe565b80600080612f99836000908152600a602052604090205460ff1690565b60ff1614612fb95760405162461bcd60e51b81526004016110c590615b47565b6111fb83614a8f565b612fcc338361372b565b612fe85760405162461bcd60e51b81526004016110c590615bd0565b61124984848484614aee565b600e546001600160a01b0316331461301e5760405162461bcd60e51b81526004016110c590615b6e565b6040516331a9108f60e11b81526004810182905230906001600160a01b03841690636352211e9060240160206040518083038186803b15801561306057600080fd5b505afa158015613074573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613098919061539d565b6001600160a01b0316146130be5760405162461bcd60e51b81526004016110c590615c21565b6040516323b872dd60e01b81526001600160a01b038316906323b872dd906130ee903090879086906004016158de565b600060405180830381600087803b15801561310857600080fd5b505af115801561311c573d6000803e3d6000fd5b50505050505050565b6060600861313283614b21565b516000848152600a602052604090205461314e9060ff16614c60565b6040516020016131609392919061583a565b6040516020818303038152906040529050919050565b600d818154811061318657600080fd5b90600052602060002090600402016000915090508060000180546131a990615deb565b80601f01602080910402602001604051908101604052809291908181526020018280546131d590615deb565b80156132225780601f106131f757610100808354040283529160200191613222565b820191906000526020600020905b81548152906001019060200180831161320557829003601f168201915b505050506001830154600284015460039094015492936001600160a01b039091169290915084565b611e2f838383612f04565b600082613261600d5490565b811061327f5760405162461bcd60e51b81526004016110c590615af5565b600d81815481106132a057634e487b7160e01b600052603260045260246000fd5b6000918252602080832060036004909302019190910154838352601f8252604080842054601e909352909220546132d79190615d3a565b111561331c5760405162461bcd60e51b815260206004820152601460248201527346756c6c79206d696e74656420616c726561647960601b60448201526064016110c5565b61332584611755565b3410156133675760405162461bcd60e51b815260206004820152601060248201526f119959481a5b9cdd59999a58da595b9d60821b60448201526064016110c5565b6113db8484614d7a565b61337a81612f7c565b6119f48161349f565b60008161338f600d5490565b81106133ad5760405162461bcd60e51b81526004016110c590615af5565b600d81815481106133ce57634e487b7160e01b600052603260045260246000fd5b6000918252602080832060036004909302019190910154838352601f8252604080842054601e909352909220546134059190615d3a565b111561344a5760405162461bcd60e51b815260206004820152601460248201527346756c6c79206d696e74656420616c726561647960601b60448201526064016110c5565b61345383611755565b3410156134955760405162461bcd60e51b815260206004820152601060248201526f119959481a5b9cdd59999a58da595b9d60821b60448201526064016110c5565b611ab28333614d7a565b8033806134ab83611dad565b6001600160a01b0316146134d15760405162461bcd60e51b81526004016110c590615b1c565b826000806134ee836000908152600a602052604090205460ff1690565b60ff161461350e5760405162461bcd60e51b81526004016110c590615b47565b613519856001614756565b6000858152600c6020526040812054606490601490611eff906119f7565b600e546001600160a01b031633146135615760405162461bcd60e51b81526004016110c590615b6e565b6001600160a01b0381166135c65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016110c5565b600e546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600e80546001600160a01b0319166001600160a01b0392909216919091179055565b6060600261363f836000908152600a602052604090205460ff1690565b60ff16141561122f57610ef182614ebc565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061368682611dad565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008181526013602090815260409182902080548351818402810184019094528084526060939283018282801561371f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613701575b50505050509050919050565b6000818152600260205260408120546001600160a01b03166137a45760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016110c5565b60006137af83611dad565b9050806001600160a01b0316846001600160a01b031614806137ea5750836001600160a01b03166137df84611050565b6001600160a01b0316145b806113db57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff166113db565b826001600160a01b031661383182611dad565b6001600160a01b0316146138995760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b60648201526084016110c5565b6001600160a01b0382166138fb5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016110c5565b613906600082613651565b6001600160a01b038316600090815260036020526040812080546001929061392f908490615d85565b90915550506001600160a01b038216600090815260036020526040812080546001929061395d908490615d3a565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000806139c9611280565b60405163bcfee33560e01b81523060048201529091506001600160a01b0382169063bcfee3359060240160206040518083038186803b158015613a0b57600080fd5b505afa158015613a1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a4391906156f8565b613a855760405162461bcd60e51b8152602060048201526013602482015272141bda5b9d081d1bdad95b881b9bdd081cd95d606a1b60448201526064016110c5565b6000613a8f611280565b9050613a9a84612b13565b6040516370a0823160e01b81523360048201526001600160a01b038316906370a082319060240160206040518083038186803b158015613ad957600080fd5b505afa158015613aed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b119190615764565b1015613b545760405162461bcd60e51b8152602060048201526012602482015271141bda5b9d081a5b9cdd59999a58da595b9d60721b60448201526064016110c5565b806001600160a01b03166323b872dd3330613b6e88612b13565b6040518463ffffffff1660e01b8152600401613b8c939291906158de565b600060405180830381600087803b158015613ba657600080fd5b505af1158015613bba573d6000803e3d6000fd5b5050506000858152601f60205260408120805460019350909190613bdf908490615d3a565b90915550613bef90508585614f26565b95945050505050565b60008181526012602052604090205415613c7e57600081815260126020526040812054600f805491929091613c2e908490615d85565b9091555050600081815260126020526040808220549051339282156108fc02929190818181858888f19350505050158015613c6d573d6000803e3d6000fd5b506000818152601260205260408120555b60008181526013602052604090205415613f2d576000818152601460205260408120905b600083815260136020526040902054811015613f1357601054600084815260136020526040902080546001600160a01b039092169183908110613cf557634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03161415613d8057600083815260136020526040812080548492919084908110613d4257634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b031683528201929092526040018120546011805491929091613d7a908490615d85565b90915550505b6000838152601360205260409020805482908110613dae57634e487b7160e01b600052603260045260246000fd5b600091825260208083209091015485835260139091526040822080546001600160a01b039092169263a9059cbb92339287929187908110613dff57634e487b7160e01b600052603260045260246000fd5b6000918252602080832091909101546001600160a01b039081168452908301939093526040918201902054905160e085901b6001600160e01b03191681529290911660048301526024820152604401602060405180830381600087803b158015613e6857600080fd5b505af1158015613e7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ea091906156f8565b50600083815260146020908152604080832060139092528220805491929184908110613edc57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b0316835282019290925260400181205580613f0b81615e20565b915050613ca2565b506000828152601360205260408120613f2b91615258565b505b60008181526015602052604090205415614150576000818152601660205260408120905b6000838152601560205260409020548110156141365760005b6000848152601560205260409020548110156140c3576000848152601560205260409020805483908110613fae57634e487b7160e01b600052603260045260246000fd5b9060005260206000200160009054906101000a90046001600160a01b03166001600160a01b03166323b872dd3033866000601560008b8152602001908152602001600020888154811061401157634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b03168352820192909252604001902080548690811061405557634e487b7160e01b600052603260045260246000fd5b90600052602060002001546040518463ffffffff1660e01b815260040161407e939291906158de565b600060405180830381600087803b15801561409857600080fd5b505af11580156140ac573d6000803e3d6000fd5b5050505080806140bb90615e20565b915050613f6a565b506000838152601460209081526040808320601590925282208054919291849081106140ff57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b031683528201929092526040018120558061412e81615e20565b915050613f51565b50600082815260156020526040812061414e91615258565b505b600081815260176020526040902054156119f45760005b60008281526017602052604090205481101561442a5760005b6000838152601860209081526040808320601790925282208054919291859081106141bb57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b031683528201929092526040019020548110156143b757600083815260176020526040902080548390811061421557634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101548583526018825260408084206017909352832080546001600160a01b039092169363f242432a9330933393919291908990811061427057634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b0316835282019290925260400190208054869081106142b457634e487b7160e01b600052603260045260246000fd5b600091825260208083206002909202909101548983526018825260408084206017909352832080549193918a9081106142fd57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b03168352820192909252604001902080548790811061434157634e487b7160e01b600052603260045260246000fd5b9060005260206000209060020201600101546040518563ffffffff1660e01b8152600401614372949392919061593f565b600060405180830381600087803b15801561438c57600080fd5b505af11580156143a0573d6000803e3d6000fd5b5050505080806143af90615e20565b915050614180565b506000828152601460209081526040808320601790925282208054919291849081106143f357634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b031683528201929092526040018120558061442281615e20565b915050614167565b5060008181526017602052604081206119f491615258565b6001600160a01b0383166144685760405162461bcd60e51b81526004016110c590615c21565b600081116144885760405162461bcd60e51b81526004016110c590615ba3565b604051637921219560e11b815233600480830191909152306024830152604482018490526064820183905260a0608483015260a4820152630307830360e41b60c48201526001600160a01b0384169063f242432a9060e401600060405180830381600087803b1580156144fa57600080fd5b505af115801561450e573d6000803e3d6000fd5b50505060008581526018602090815260408083206001600160a01b0388168452909152902054151590506145745760008481526017602090815260408220805460018101825590835291200180546001600160a01b0319166001600160a01b0385161790555b60009384526018602090815260408086206001600160a01b03909516865293815283852084518086019095529284528381019182528254600181810185559386529420925160029094029092019283559051910155565b6001600160a01b0382166145f15760405162461bcd60e51b81526004016110c590615c21565b6040516323b872dd60e01b81526001600160a01b038316906323b872dd90614621903390309086906004016158de565b600060405180830381600087803b15801561463b57600080fd5b505af115801561464f573d6000803e3d6000fd5b50505060008481526016602090815260408083206001600160a01b0387168452909152902054151590506146b55760008381526015602090815260408220805460018101825590835291200180546001600160a01b0319166001600160a01b0384161790555b60009283526016602090815260408085206001600160a01b0390941685529281529183208054600181018255908452919092200155565b60008181526017602090815260409182902080548351818402810184019094528084526060939283018282801561371f576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116137015750505050509050919050565b60095460ff9081169082161061479e5760405162461bcd60e51b815260206004820152600d60248201526c496e76616c696420737461746560981b60448201526064016110c5565b6000828152600a6020908152604091829020805460ff191660ff85169081179091558251858152918201527f5f37cb0e663bb52ce92e7edf0e34cd00146463aea0dabf3dd721dbd522ec9858910160405180910390a15050565b60008281526016602090815260408083206001600160a01b038516845282529182902080548351818402810184019094528084526060939283018282801561485f57602002820191906000526020600020905b81548152602001906001019080831161484b575b5050505050905092915050565b6001600160a01b0382166148925760405162461bcd60e51b81526004016110c590615c21565b600081116148b25760405162461bcd60e51b81526004016110c590615ba3565b6040516323b872dd60e01b81526001600160a01b038316906323b872dd906148e2903390309086906004016158de565b602060405180830381600087803b1580156148fc57600080fd5b505af1158015614910573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061493491906156f8565b5060008381526014602090815260408083206001600160a01b03861684529091529020546149945760008381526013602090815260408220805460018101825590835291200180546001600160a01b0319166001600160a01b0384161790555b6010546001600160a01b03838116911614156149c25780601160008282546149bc9190615d3a565b90915550505b60008381526014602090815260408083206001600160a01b0386168452909152812080548392906149f4908490615d3a565b9091555050505050565b60008281526018602090815260408083206001600160a01b03851684528252808320805482518185028101850190935280835260609492939192909184015b82821015614a8357838290600052602060002090600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190614a3d565b50505050905092915050565b60003411614aaf5760405162461bcd60e51b81526004016110c590615ba3565b60008181526012602052604081208054349290614acd908490615d3a565b9250508190555034600f6000828254614ae69190615d3a565b909155505050565b614af984848461381e565b614b0584848484614f85565b6112495760405162461bcd60e51b81526004016110c590615aa3565b614b5560405180608001604052806060815260200160006001600160a01b0316815260200160008152602001600081525090565b6000828152600c6020526040902054600d80549091908110614b8757634e487b7160e01b600052603260045260246000fd5b9060005260206000209060040201604051806080016040529081600082018054614bb090615deb565b80601f0160208091040260200160405190810160405280929190818152602001828054614bdc90615deb565b8015614c295780601f10614bfe57610100808354040283529160200191614c29565b820191906000526020600020905b815481529060010190602001808311614c0c57829003601f168201915b505050918352505060018201546001600160a01b031660208201526002820154604082015260039091015460609091015292915050565b606081614c845750506040805180820190915260018152600360fc1b602082015290565b8160005b8115614cae5780614c9881615e20565b9150614ca79050600a83615d52565b9150614c88565b60008167ffffffffffffffff811115614cd757634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015614d01576020820181803683370190505b5090505b84156113db57614d16600183615d85565b9150614d23600a86615e3b565b614d2e906030615d3a565b60f81b818381518110614d5157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350614d73600a86615d52565b9450614d05565b6000828152601e602052604081208054600191908390614d9b908490615d3a565b90915550506000838152601a6020526040902054421015614e4d576064614dc4600a6014615d9c565b60ff16600d8581548110614de857634e487b7160e01b600052603260045260246000fd5b906000526020600020906004020160020154614e049190615d66565b614e0e9190615d52565b600f6000828254614e1f9190615d3a565b909155505060008381526020805260408120805460019290614e42908490615d3a565b90915550614eb29050565b6064601460ff16600d8581548110614e7557634e487b7160e01b600052603260045260246000fd5b906000526020600020906004020160020154614e919190615d66565b614e9b9190615d52565b600f6000828254614eac9190615d3a565b90915550505b611ab28284614f26565b60008181526015602090815260409182902080548351818402810184019094528084526060939283018282801561371f576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116137015750505050509050919050565b6000614f31600d5490565b8210614f4f5760405162461bcd60e51b81526004016110c590615af5565b614f5d600780546001019055565b6000614f6860075490565b6000818152600c602052604090208490559050611ab28482615092565b60006001600160a01b0384163b1561508757604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290614fc9903390899088908890600401615902565b602060405180830381600087803b158015614fe357600080fd5b505af1925050508015615013575060408051601f3d908101601f1916820190925261501091810190615730565b60015b61506d573d808015615041576040519150601f19603f3d011682016040523d82523d6000602084013e615046565b606091505b5080516150655760405162461bcd60e51b81526004016110c590615aa3565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506113db565b506001949350505050565b6001600160a01b0382166150e85760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016110c5565b6000818152600260205260409020546001600160a01b03161561514d5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016110c5565b6001600160a01b0382166000908152600360205260408120805460019290615176908490615d3a565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b8280546151e090615deb565b90600052602060002090601f0160209004810192826152025760008555615248565b82601f1061521b57805160ff1916838001178555615248565b82800160010185558215615248579182015b8281111561524857825182559160200191906001019061522d565b50615254929150615272565b5090565b50805460008255906000526020600020908101906119f491905b5b808211156152545760008155600101615273565b600067ffffffffffffffff8311156152a1576152a1615e7b565b6152b4601f8401601f1916602001615d09565b90508281528383830111156152c857600080fd5b828260208301376000602084830101529392505050565b600082601f8301126152ef578081fd5b8135602067ffffffffffffffff82111561530b5761530b615e7b565b8160051b61531a828201615d09565b838152828101908684018388018501891015615334578687fd5b8693505b85841015615356578035835260019390930192918401918401615338565b50979650505050505050565b600082601f830112615372578081fd5b611ab283833560208501615287565b600060208284031215615392578081fd5b8135611ab281615e91565b6000602082840312156153ae578081fd5b8151611ab281615e91565b600080604083850312156153cb578081fd5b82356153d681615e91565b915060208301356153e681615e91565b809150509250929050565b600080600080600060a08688031215615408578081fd5b853561541381615e91565b9450602086013561542381615e91565b9350604086013567ffffffffffffffff8082111561543f578283fd5b61544b89838a016152df565b94506060880135915080821115615460578283fd5b61546c89838a016152df565b93506080880135915080821115615481578283fd5b5061548e88828901615362565b9150509295509295909350565b6000806000606084860312156154af578283fd5b83356154ba81615e91565b925060208401356154ca81615e91565b929592945050506040919091013590565b600080600080608085870312156154f0578384fd5b84356154fb81615e91565b9350602085013561550b81615e91565b925060408501359150606085013567ffffffffffffffff81111561552d578182fd5b61553987828801615362565b91505092959194509250565b6000806000806080858703121561555a578384fd5b843561556581615e91565b9350602085013561557581615e91565b93969395505050506040820135916060013590565b60008060008060008060a087890312156155a2578384fd5b86356155ad81615e91565b955060208701356155bd81615e91565b94506040870135935060608701359250608087013567ffffffffffffffff808211156155e7578283fd5b818901915089601f8301126155fa578283fd5b813581811115615608578384fd5b8a6020828501011115615619578384fd5b6020830194508093505050509295509295509295565b60008060408385031215615641578182fd5b823561564c81615e91565b915060208301356153e681615ea6565b60008060008060808587031215615671578182fd5b843561567c81615e91565b9350602085013567ffffffffffffffff811115615697578283fd5b8501601f810187136156a7578283fd5b6156b687823560208401615287565b949794965050505060408301359260600135919050565b600080604083850312156156df578182fd5b82356156ea81615e91565b946020939093013593505050565b600060208284031215615709578081fd5b8151611ab281615ea6565b600060208284031215615725578081fd5b8135611ab281615eb4565b600060208284031215615741578081fd5b8151611ab281615eb4565b60006020828403121561575d578081fd5b5035919050565b600060208284031215615775578081fd5b5051919050565b6000806040838503121561578e578182fd5b8235915060208301356153e681615e91565b6000806000606084860312156157b4578081fd5b8335925060208401356154ca81615e91565b600080600080608085870312156157db578182fd5b84359350602085013561557581615e91565b600080604083850312156157ff578182fd5b50508035926020909101359150565b60008151808452615826816020860160208601615dbf565b601f01601f19169290920160200192915050565b600080855461584881615deb565b6001828116801561586057600181146158715761589d565b60ff1984168752828701945061589d565b8986526020808720875b858110156158945781548a82015290840190820161587b565b50505082870194505b50875192506158b0838560208b01615dbf565b602f60f81b939092019283528551916158cf8382860160208a01615dbf565b91909201019695505050505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906159359083018461580e565b9695505050505050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a060808201819052600490820152633078303160e01b60c082015260e00190565b6020808252825182820181905260009190848201906040850190845b818110156159c55783516001600160a01b0316835292840192918401916001016159a0565b50909695505050505050565b602080825282518282018190526000919060409081850190868401855b82811015615a13578151805185528601518685015292840192908501906001016159ee565b5091979650505050505050565b6020808252825182820181905260009190848201906040850190845b818110156159c557835183529284019291840191600101615a3c565b602081526000611ab2602083018461580e565b608081526000615a7e608083018761580e565b6001600160a01b03959095166020830152506040810192909252606090910152919050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252600d908201526c105cdcd95d081a5b9d985b1a59609a1b604082015260600190565b60208082526011908201527014195c9b5a5cdcda5bdb8819195b9a5959607a1b604082015260600190565b6020808252600d908201526c14dd185d19481a5b9d985b1a59609a1b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b602080825260139082015272105b5bdd5b9d081a5b9cdd59999a58da595b9d606a1b604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252600d908201526c151bdad95b881a5b9d985b1a59609a1b604082015260600190565b8281526000602060408184015260806040840152818454615c6881615deb565b8060c087015260e0600180841660008114615c8a5760018114615c9f57615cca565b60ff1985168984015261010089019550615cca565b898852868820885b85811015615cc25781548b8201860152908301908801615ca7565b8a0184019650505b508801546001600160a01b0316606088018190529450615ce992505050565b60028501546080850152600385015460a085015280925050509392505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715615d3257615d32615e7b565b604052919050565b60008219821115615d4d57615d4d615e4f565b500190565b600082615d6157615d61615e65565b500490565b6000816000190483118215151615615d8057615d80615e4f565b500290565b600082821015615d9757615d97615e4f565b500390565b600060ff821660ff841680821015615db657615db6615e4f565b90039392505050565b60005b83811015615dda578181015183820152602001615dc2565b838111156112495750506000910152565b600181811c90821680615dff57607f821691505b602082108114156124ec57634e487b7160e01b600052602260045260246000fd5b6000600019821415615e3457615e34615e4f565b5060010190565b600082615e4a57615e4a615e65565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146119f457600080fd5b80151581146119f457600080fd5b6001600160e01b0319811681146119f457600080fdfea26469706673582212205905e26da6d569cb40e3916ac6e99162b2590f7f0856de659683bad940a2b26a64736f6c63430008040033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1956,
        "contract": "contracts/products/UTBGiftBox.sol:UTBGiftBox",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 1958,
        "contract": "contracts/products/UTBGiftBox.sol:UTBGiftBox",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1962,
        "contract": "contracts/products/UTBGiftBox.sol:UTBGiftBox",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1966,
        "contract": "contracts/products/UTBGiftBox.sol:UTBGiftBox",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1970,
        "contract": "contracts/products/UTBGiftBox.sol:UTBGiftBox",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1976,
        "contract": "contracts/products/UTBGiftBox.sol:UTBGiftBox",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2895,
        "contract": "contracts/products/UTBGiftBox.sol:UTBGiftBox",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 5655,
        "contract": "contracts/products/UTBGiftBox.sol:UTBGiftBox",
        "label": "_tokenIds",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(Counter)3362_storage"
      },
      {
        "astId": 5663,
        "contract": "contracts/products/UTBGiftBox.sol:UTBGiftBox",
        "label": "baseURI",
        "offset": 0,
        "slot": "8",
        "type": "t_string_storage"
      },
      {
        "astId": 5665,
        "contract": "contracts/products/UTBGiftBox.sol:UTBGiftBox",
        "label": "states",
        "offset": 0,
        "slot": "9",
        "type": "t_uint8"
      },
      {
        "astId": 5669,
        "contract": "contracts/products/UTBGiftBox.sol:UTBGiftBox",
        "label": "tokenStates",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_uint8)"
      },
      {
        "astId": 5671,
        "contract": "contracts/products/UTBGiftBox.sol:UTBGiftBox",
        "label": "renewable",
        "offset": 0,
        "slot": "11",
        "type": "t_bool"
      },
      {
        "astId": 5684,
        "contract": "contracts/products/UTBGiftBox.sol:UTBGiftBox",
        "label": "tokenAssets",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5688,
        "contract": "contracts/products/UTBGiftBox.sol:UTBGiftBox",
        "label": "assets",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_struct(Asset)5680_storage)dyn_storage"
      },
      {
        "astId": 7,
        "contract": "contracts/products/UTBGiftBox.sol:UTBGiftBox",
        "label": "_owner",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 7096,
        "contract": "contracts/products/UTBGiftBox.sol:UTBGiftBox",
        "label": "lockedETH",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 7098,
        "contract": "contracts/products/UTBGiftBox.sol:UTBGiftBox",
        "label": "pointToken",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 7100,
        "contract": "contracts/products/UTBGiftBox.sol:UTBGiftBox",
        "label": "lockedPoints",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 7104,
        "contract": "contracts/products/UTBGiftBox.sol:UTBGiftBox",
        "label": "deposits",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7109,
        "contract": "contracts/products/UTBGiftBox.sol:UTBGiftBox",
        "label": "tokenERC20s",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 7115,
        "contract": "contracts/products/UTBGiftBox.sol:UTBGiftBox",
        "label": "depositERC20s",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 7120,
        "contract": "contracts/products/UTBGiftBox.sol:UTBGiftBox",
        "label": "tokenERC721s",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 7127,
        "contract": "contracts/products/UTBGiftBox.sol:UTBGiftBox",
        "label": "depositERC721s",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_array(t_uint256)dyn_storage))"
      },
      {
        "astId": 7132,
        "contract": "contracts/products/UTBGiftBox.sol:UTBGiftBox",
        "label": "tokenERC1155s",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 7140,
        "contract": "contracts/products/UTBGiftBox.sol:UTBGiftBox",
        "label": "depositERC1155s",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_array(t_struct(TkERC1155)7094_storage)dyn_storage))"
      },
      {
        "astId": 5982,
        "contract": "contracts/products/UTBGiftBox.sol:UTBGiftBox",
        "label": "factory",
        "offset": 0,
        "slot": "25",
        "type": "t_contract(IUTBFactory)8078"
      },
      {
        "astId": 5989,
        "contract": "contracts/products/UTBGiftBox.sol:UTBGiftBox",
        "label": "discounts",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 6000,
        "contract": "contracts/products/UTBGiftBox.sol:UTBGiftBox",
        "label": "authorAssets",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 6004,
        "contract": "contracts/products/UTBGiftBox.sol:UTBGiftBox",
        "label": "rewardClaims",
        "offset": 0,
        "slot": "28",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 6008,
        "contract": "contracts/products/UTBGiftBox.sol:UTBGiftBox",
        "label": "reserveClaims",
        "offset": 0,
        "slot": "29",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 6015,
        "contract": "contracts/products/UTBGiftBox.sol:UTBGiftBox",
        "label": "mints",
        "offset": 0,
        "slot": "30",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 6019,
        "contract": "contracts/products/UTBGiftBox.sol:UTBGiftBox",
        "label": "mintWithPoints",
        "offset": 0,
        "slot": "31",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 6023,
        "contract": "contracts/products/UTBGiftBox.sol:UTBGiftBox",
        "label": "mintWithDiscounts",
        "offset": 0,
        "slot": "32",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Asset)5680_storage)dyn_storage": {
        "base": "t_struct(Asset)5680_storage",
        "encoding": "dynamic_array",
        "label": "struct StatefulURI.Asset[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(TkERC1155)7094_storage)dyn_storage": {
        "base": "t_struct(TkERC1155)7094_storage",
        "encoding": "dynamic_array",
        "label": "struct Vault.TkERC1155[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IUTBFactory)8078": {
        "encoding": "inplace",
        "label": "contract IUTBFactory",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(TkERC1155)7094_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Vault.TkERC1155[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(TkERC1155)7094_storage)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_array(t_struct(TkERC1155)7094_storage)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct Vault.TkERC1155[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_struct(TkERC1155)7094_storage)dyn_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_array(t_uint256)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint8)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Asset)5680_storage": {
        "encoding": "inplace",
        "label": "struct StatefulURI.Asset",
        "members": [
          {
            "astId": 5673,
            "contract": "contracts/products/UTBGiftBox.sol:UTBGiftBox",
            "label": "asset",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 5675,
            "contract": "contracts/products/UTBGiftBox.sol:UTBGiftBox",
            "label": "author",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 5677,
            "contract": "contracts/products/UTBGiftBox.sol:UTBGiftBox",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5679,
            "contract": "contracts/products/UTBGiftBox.sol:UTBGiftBox",
            "label": "limit",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Counter)3362_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 3361,
            "contract": "contracts/products/UTBGiftBox.sol:UTBGiftBox",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TkERC1155)7094_storage": {
        "encoding": "inplace",
        "label": "struct Vault.TkERC1155",
        "members": [
          {
            "astId": 7091,
            "contract": "contracts/products/UTBGiftBox.sol:UTBGiftBox",
            "label": "tokenId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7093,
            "contract": "contracts/products/UTBGiftBox.sol:UTBGiftBox",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}